#!/usr/bin/env ruby

require 'optparse'

fix_delim = "^A"
human_delim = " : "
extract_fields = "all"
heartbeats = false
message_types = "all"
contains_field = "all"
output_raw = false

OptionParser.new do |options|
  # This banner is the first line of your help documentation.
  options.set_banner "Usage: fixx [options] [files]\n" \
    "Fixx helps you grep through your icky fix message logs."

  # Separator just adds a new line with the specified text.
  options.separator ""
  options.separator "Specific options:"

  options.on("--show-heartbeats", "Output 35=0 rows (filtered out by default).") do |flag|
    heartbeats = flag
  end

  options.on("--raw", "Output rows in raw format.") do |flag|
    output_raw = flag
  end

  options.on("-m", "--message-types t1,t2,t3", String, "Filter for specific message types (comma delimited list).") do |value|
    message_types = value.split(",").map(&:strip)
  end

  options.on("-c", "--contains-field NUM", Integer, "Filter for messages that contain a particular field.") do |value|
    contains_field = value
  end

  options.on("-e", "--extract-fields f1,f2,f3", String, "Extract specific fields (comma delimited list).") do |value|
    extract_fields = value.split(",").map{|x| x.strip.to_i}
  end

  options.on_tail("-h", "--help", "You're looking at it!") do
    $stderr.puts options
    exit 1
  end
end.parse!

# Keep reading lines of input as long as they're coming.
while input = ARGF.gets
  input.each_line do |line|

    printable = " " + line.gsub(/[^[:print:]]/, human_delim)

    skip = false
    skip = true if !heartbeats && printable.include?(" 35=0 ")
    skip = true unless message_types == "all" || message_types.any?{|mt| printable.include?(" 35=#{mt} ")}
    skip = true if contains_field != "all" && !printable.include?(" #{contains_field}=")

    unless skip
      if extract_fields != "all"
        matches = extract_fields.collect{|ef| printable.match(/#{ef.to_s}=[^ ]*/)}.select{|m| !m.nil?}
        if matches.empty?
          skip = true
        else
          output_line = matches.collect{|m| m[0]}.join(human_delim)
        end
      else
        output_line = printable
      end

      begin
        unless skip
          if output_raw
            $stdout.puts output_line.gsub(/#{human_delim}/, fix_delim).strip
          else
            $stdout.puts output_line
          end
        end
      rescue Errno::EPIPE
        exit(74)
      end
    end
  end
end
